function [G,x,y]=setGraph(start_x, start_y,...
    tri_x, tri_y, goal_x, goal_y)
% setGraph: Define graph between all locations. 
% 
% Input: start_x,start_y,tri_x,tri_y,goal_x,goal_y are vectors of xy-coordinates
%
% Returns: G is a graph, x and y are coordinate vectors.

% start nodes
st=[ 1 1 ... % start connections 
   2 2 2 2 ... 
   3 3 ... 
   4 4 4 4 ...
   5 5 ...
   6 6 6 6 ...
   7 7 ...
   8 8 8 8 ...
   9 9 ...
   10 10 10 10 ... 
   13 11 ... % goal connections 
   16 14 ...
   25 23 ...
   11 14 17 20 23 ... % outer line
   12 15 18 21 24 ... % inner line
   11 12 ... % cross-connections 
   14 15 ...
   17 18 ...
   20 21 ...
   23 24 ]; 

% target nodes 
tar=[ 11 13 ...
   16 15 12 11 ...
   14 16 ...
   14 19 18 15 ...
   17 19 ...
   17 22 21 18 ...
   20 22 ...
   20 25 24 21 ...
   23 25 ...
   23 13 12 24 ...
   28 28 ...
   27 27 ...
   26 26 ...
   16 19 22 25 13 ...
   15 18 21 24 12 ...
   15 16 ...
   18 19 ...
   21 22 ...
   24 25 ...
   12 13 ]; 

% node names 
nodenames={ 's1(A)','s2(B)','s3(C)','s4(D)','s5(E)','s6(F)', 's7(G)', 's8(H)', 's9(I)', 's10(J)',...
    'tri_1_r','tri_1_b','tri_1_l','tri_2_r','tri_2_b','tri_2_l','tri_3_r','tri_3_b','tri_3_l',...
    'tri_4_r','tri_4_b','tri_4_l','tri_5_r','tri_5_b','tri_5_l',...
    'g93(I)','g22(C)','g11(A)' };

% create graph
G=graph(st, tar);

% graph coordinates (must be in correct order) 
x = [transpose(start_x) tri_x(2,1) tri_x(3,1) tri_x(4,1) tri_x(2,2) tri_x(3,2) tri_x(4,2) ...
    tri_x(2,3) tri_x(3,3) tri_x(4,3) tri_x(2,4) tri_x(3,4) tri_x(4,4) tri_x(2,5) tri_x(3,5) tri_x(4,5) ...
    flip(transpose(goal_x))];
y = [transpose(start_y) tri_y(2,1) tri_y(3,1) tri_y(4,1) tri_y(2,2) tri_y(3,2) tri_y(4,2) ...
    tri_y(2,3) tri_y(3,3) tri_y(4,3) tri_y(2,4) tri_y(3,4) tri_y(4,4) tri_y(2,5) tri_y(3,5) tri_y(4,5) ...
    flip(transpose(goal_y))];

% calculate distance for edge weights  
[sn,tn] = findedge(G);
dx = x(sn) - x(tn);
dy = y(sn) - y(tn);
D = hypot(dx,dy);

% add edge weights 
G.Edges.Weight = D';

% add names 
G.Nodes.Names=nodenames'; % access with e.g., G.Nodes.Names{1} = 's1'

% % plot 
% figure; 
% p = plot(G,'XData',x,'YData',y);
% % p = plot(G,'XData',x,'YData',y,'EdgeLabel',G.Edges.Weight);
% labelnode(p,[1:28],nodenames);
% xlim([0 1]);
% ylim([0 1]);

end